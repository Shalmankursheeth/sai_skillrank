import { useEffect, useState } from "react";
import { getCandidates, getJobs, computeMatch, listMatches } from "../api";
import Spinner from "../components/Spinner";
export default function Matches(){
  const [candidates,setCandidates]=useState([]); const [jobs,setJobs]=useState([]); const [candidateId,setCandidateId]=useState(""); const [jobId,setJobId]=useState(""); const [running,setRunning]=useState(false); const [result,setResult]=useState(null); const [history,setHistory]=useState([]);
  useEffect(()=>{ (async()=>{ setCandidates(await getCandidates()||[]); setJobs(await getJobs()||[]); setHistory(await listMatches()||[]); })(); },[]);
  async function handleCompute(){ if(!candidateId||!jobId) return alert("select both"); setRunning(true); setResult(null); try{ const res = await computeMatch(Number(candidateId),Number(jobId),true); setResult(res); setHistory(await listMatches()||history); }catch(e){ alert("Match failed: "+String(e)); } finally{ setRunning(false); } }
  return (<div className="container mx-auto p-4 max-w-4xl"><div className="grid md:grid-cols-2 gap-6"><div className="p-4 border rounded bg-white"><h2 className="text-lg font-semibold mb-3">Compute Match</h2><label className="text-sm">Candidate</label><select className="w-full p-2 border rounded mt-1 mb-3" value={candidateId} onChange={e=>setCandidateId(e.target.value)}><option value="">-- select candidate --</option>{candidates.map(c=><option key={c.id} value={c.id}>{c.name}</option>)}</select><label className="text-sm">Job</label><select className="w-full p-2 border rounded mt-1 mb-3" value={jobId} onChange={e=>setJobId(e.target.value)}><option value="">-- select job --</option>{jobs.map(j=><option key={j.id} value={j.id}>{j.title} @ {j.company}</option>)}</select><div className="flex items-center gap-3"><button onClick={handleCompute} disabled={running} className="bg-indigo-600 text-white px-4 py-2 rounded inline-flex items-center gap-2">{running ? <Spinner/> : null}{running ? "Computing..." : "Compute Match (explain)"}</button></div></div><div className="p-4 border rounded bg-white"><h2 className="text-lg font-semibold mb-3">Result</h2>{!result ? <div className="text-sm text-gray-500">No result yet.</div> : (<div><div className="flex items-center gap-4 mb-3"><div className="text-4xl font-bold text-indigo-600">{Math.round(result.score)}</div><div className="text-sm text-gray-600">match score</div></div><div className="mb-3"><div className="text-sm font-semibold">Matching skills</div><div className="mt-2 flex flex-wrap gap-2">{(result.matching_skills||[]).map(s=> <span key={s} className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs">{s}</span>)}</div></div><div className="mb-3"><div className="text-sm font-semibold">Missing skills</div><div className="mt-2 flex flex-wrap gap-2">{(result.missing_skills||[]).map(s=> <span key={s} className="px-2 py-1 bg-red-100 text-red-800 rounded text-xs">{s}</span>)}</div></div><div className="mb-3"><div className="text-sm font-semibold">Explanation</div><p className="mt-1 text-sm text-gray-700">{result.explanation}</p></div>{result.recommendations?.length>0 && (<div className="mb-3"><div className="text-sm font-semibold">Recommendations</div><ul className="list-disc ml-5 mt-1 text-sm">{result.recommendations.map((r,i)=><li key={i}>{r}</li>)}</ul></div>)}</div>)}</div></div><div className="mt-6 bg-white border p-4 rounded"><h3 className="text-lg font-semibold mb-2">Match History (recent)</h3>{history.length===0 ? <div className="text-sm text-gray-500">No match history available (GET /matches not implemented).</div> : history.map(h=>(<div key={h.id} className="p-3 border rounded mb-2"><div className="text-sm">Match {h.id}: candidate {h.candidate_id} — job {h.job_id} — score {h.score}</div><div className="text-xs text-gray-700 mt-1">{h.explanation}</div></div>))}</div></div>); }

Js
